#Define cross-validation technique to perform
num_folds=5 #change based on the number of folds
#kf = KFold(n_splits=num_folds, shuffle=True, random_state=42) # Use Stratified K Fold in presence of class unbalance

kf = StratifiedKFold(n_splits=num_folds, shuffle=True)

# Define range of k for SelectKBest
k_range = range(5, 50)  #  adjust this range to explore more features

# Initialize variables to store best parameters
best_k = None
best_accuracy = 0.0
best_specificity = 0.0
best_sensitivity = 0.0
best_precision = 0.0
best_f1 = 0.0
best_roc_auc = 0.0
# Initialize an empty list to store the best feature columns
best_feature_data = pd.DataFrame()
best_hyperparameters = {}
concatenated_data = pd.DataFrame()

logistic_regression_param_grid = {
    'C': [0.1, 0.5, 1, 3, 5, 10, 20],
    'penalty': ['l1', 'l2'],
    'solver': [  'liblinear']
}

for k_best_features in k_range: #explore different number of features to be extracted and store only the best result
    # Feature selection using SelectKBest
    selector = SelectKBest(score_func=f_classif, k=k_best_features)
    X_selected = selector.fit_transform(predictors_t1, target_t1)
    selected_indices = selector.get_support(indices=True)
    selected_columns = predictors_t1.columns[selected_indices]

    selected_data = pd.DataFrame(X_selected, columns=selected_columns)
    model = LogisticRegression()
    param_grid = logistic_regression_param_grid
    
    grid_search = GridSearchCV(model, param_grid, cv=num_folds, scoring='roc_auc')
    
    accuracies = []
    sensitivities = []
    specificities = []
    precisions = []
    f1_scores = []
    roc_aucs = []
    
    all_fpr = []
    all_tpr = []
    fold_concatenated_data = pd.DataFrame()
    for train_index, test_index in kf.split(X_selected, target_t1): #randomly split training and test sets for each fold
        X_train, X_test = X_selected[train_index], X_selected[test_index]
        y_train, y_test = target_t1.iloc[train_index], target_t1.iloc[test_index]
        
        scaler = StandardScaler()
        X_train_normalized = scaler.fit_transform(X_train)
        X_test_normalized = scaler.transform(X_test)
        
        grid_search.fit(X_train_normalized, y_train)
        
        best_model = grid_search.best_estimator_
        best_hyperparameters[k_best_features] = grid_search.best_params_
        
        best_model.fit(X_train_normalized, y_train)

        y_pred = best_model.predict(X_test_normalized)
        y_proba = best_model.predict_proba(X_test_normalized)[:, 1]
        
        
        
        fpr, tpr, _ = roc_curve(y_test, y_proba)
        all_fpr.append(fpr)
        all_tpr.append(tpr)
        
        accuracy = accuracy_score(y_test, y_pred)
        accuracies.append(accuracy)
        sensitivities.append(recall_score(y_test, y_pred))
        specificities.append(recall_score(y_test, y_pred, pos_label=0))
        precisions.append(precision_score(y_test, y_pred))
        f1_scores.append(f1_score(y_test, y_pred))
        roc_aucs.append(roc_auc_score(y_test, y_proba))
        selected_data_with_label = pd.concat([pd.DataFrame(X_test, columns=selected_columns).reset_index(drop=True),
                                              pd.DataFrame(y_test.values, columns=['Target']).reset_index(drop=True)], axis=1)
        fold_concatenated_data = pd.concat([fold_concatenated_data, selected_data_with_label], ignore_index=True)
    average_accuracy = np.mean(accuracies)
    average_sensitivity = np.mean(sensitivities)
    average_specificity = np.mean(specificities)
    average_precision = np.mean(precisions)
    average_f1 = np.mean(f1_scores)
    average_roc_auc = np.mean(roc_aucs)

    mean_fpr = np.linspace(0, 1, 100)
    interpolated_tpr = [np.interp(mean_fpr, fpr, tpr) for fpr, tpr in zip(all_fpr, all_tpr)]
    mean_tpr = np.mean(interpolated_tpr, axis=0)

    std_accuracy = np.std(accuracies)
    std_sensitivity = np.std(sensitivities)
    std_specificity = np.std(specificities)
    std_precision = np.std(precisions)
    std_f1 = np.std(f1_scores)
    std_roc_auc = np.std(roc_aucs)

    if average_roc_auc > best_roc_auc:
        best_roc_auc = average_roc_auc
        best_k = k_best_features
        best_specificity = average_specificity
        best_sensitivity = average_sensitivity
        best_precision = average_precision
        best_f1 = average_f1
        best_accuracy = average_accuracy
        best_feature_data = fold_concatenated_data.copy()
        best_fpr = mean_fpr
        best_tpr = mean_tpr
        selected_data_with_label = pd.concat([pd.DataFrame(X_test, columns=selected_columns).reset_index(drop=True), 
                                              pd.DataFrame(y_test.values, columns=['Target']).reset_index(drop=True)], axis=1)
        concatenated_data = pd.concat([concatenated_data, selected_data_with_label], ignore_index=True)
# Plot ROC curve
plt.figure(figsize=(8, 6))
plt.plot(mean_fpr, mean_tpr, color='b', lw=2, label=f'Mean ROC AUC = {best_roc_auc:.2f}')

# Plot diagonal line (random classifier)
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')

# Set labels and title
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')


# Save plot to new directory

# Directory
directory = "roc_auc_plots"

# Create the directory
os.makedirs(directory, exist_ok=True)

plt.savefig(f'roc_auc_plots/roc_curve_model_{model_flag}_T1_sequence.png')

# Show plot
plt.close()
#writing output metrics in output file
with open(output_txt_path, "a") as file:
    file.write(f"Best number of features T1 sequence- Model : {best_k}\n")
    file.write(f"Best average accuracy T1 sequence- Model: {best_accuracy:.2f} ± {std_accuracy:.2f}\n")
    file.write(f"Best average sensitivity T1 sequence- Model: {best_sensitivity:.2f} ± {std_sensitivity:.2f}\n")
    file.write(f"Best average specificity T1 sequence- Model: {best_specificity:.2f} ± {std_specificity:.2f}\n")
    file.write(f"Best average precision T1 sequence- Model: {best_precision:.2f} ± {std_precision:.2f}\n")
    file.write(f"Best average F1-score T1 sequence- Model: {best_f1:.2f} ± {std_f1:.2f}\n")
    file.write(f"Best average ROC AUC T1 sequence - Model: {best_roc_auc:.2f} ± {std_roc_auc:.2f}\n")
    file.write(f"Best hyperparameters of the best roc_auc T1 sequence- Model: {best_hyperparameters[best_k]}\n")

with open(output_txt_path, "a") as file:
    file.write(f"ROC_AUC plots T1 sequence - Model are saved in roc_auc_plots folder\n")
    file.write(f"Best features T1 sequence - Model selected are stored in best_feature_data_model_T1.csv\n")
    
# Save the best feature columns to a CSV file
best_feature_data.to_csv(f'best_feature_data_model_T1.csv', index=False)
