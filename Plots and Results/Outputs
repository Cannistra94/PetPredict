kf = StratifiedKFold(n_splits=num_folds, shuffle=True)

best_hyperparameters = []
# Define parameter grids for each model. Add or remove to personalize parameters
logistic_regression_param_grid = {
    'C': [0.01, 0.1, 0.5, 1, 3, 5, 10, 20],
    'penalty': ['l1', 'l2'],
    'solver': [  'liblinear']
}

svm_param_grid = {
    'C': [0.1, 0.5, 0.7, 1, 3 ,5],
    'kernel': ['linear', 'rbf'],
    'gamma': ['scale', 'auto']
}

random_forest_param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

adaboost_param_grid = {
    'n_estimators': [50, 100, 150],
    'learning_rate': [0.01, 0.1, 1]
}

# Initialize model and parameter grid based on model_flag
if model_flag == 0:
    model = LogisticRegression()
    param_grid = logistic_regression_param_grid
elif model_flag == 1:
    model = SVC(probability=True)
    param_grid = svm_param_grid
elif model_flag == 2:
    model = RandomForestClassifier()
    param_grid = random_forest_param_grid
elif model_flag == 3:
    model = AdaBoostClassifier()
    param_grid = adaboost_param_grid
else:
    raise ValueError("Invalid model_flag value. Expected 0, 1, 2, or 3.")
    
grid_search = GridSearchCV(model, param_grid, cv=num_folds, scoring='roc_auc')
    
if smote_flag == 1:
    smote = SMOTE(random_state=42)
    
accuracies = []
sensitivities = []
specificities = []
precisions = []
f1_scores = []
roc_aucs = []
all_fpr = []
all_tpr = []
fold_idx=0

for train_index, test_index in kf.split(predictors_t1, target_t1):
    fold_idx=fold_idx+1
    X_train, X_test = predictors_t1.iloc[train_index,:], predictors_t1.iloc[test_index,:]
    y_train, y_test = target_t1.iloc[train_index], target_t1.iloc[test_index]

    if smote_flag == 1:
        X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)
    else:
        X_train_resampled, y_train_resampled = X_train, y_train
        
    scaler = StandardScaler()
    
    X_train_normalized = scaler.fit_transform(X_train_resampled)
    X_test_normalized = scaler.transform(X_test)
    
    grid_search.fit(X_train_normalized, y_train_resampled)
        
    best_model = grid_search.best_estimator_
    best_hyperparameters.append(grid_search.best_params_)
        
    best_model.fit(X_train_normalized, y_train_resampled)
        
    y_pred = best_model.predict(X_test_normalized)
    y_proba = best_model.predict_proba(X_test_normalized)[:, 1]
        
    fpr, tpr, _ = roc_curve(y_test, y_proba)
    all_fpr.append(fpr)
    all_tpr.append(tpr)
        
    accuracy = accuracy_score(y_test, y_pred)
    accuracies.append(accuracy)
    sensitivities.append(recall_score(y_test, y_pred))
    specificities.append(recall_score(y_test, y_pred, pos_label=0))
    precisions.append(precision_score(y_test, y_pred))
    f1_scores.append(f1_score(y_test, y_pred))
    roc_aucs.append(roc_auc_score(y_test, y_proba))
    
            
average_accuracy = np.mean(accuracies)
average_sensitivity = np.mean(sensitivities)
average_specificity = np.mean(specificities)
average_precision = np.mean(precisions)
average_f1 = np.mean(f1_scores)
average_roc_auc = np.mean(roc_aucs)

mean_fpr = np.linspace(0, 1, 100)
interpolated_tpr = [np.interp(mean_fpr, fpr, tpr) for fpr, tpr in zip(all_fpr, all_tpr)]
mean_tpr = np.mean(interpolated_tpr, axis=0)
std_accuracy = np.std(accuracies)
std_sensitivity = np.std(sensitivities)
std_specificity = np.std(specificities)
std_precision = np.std(precisions)
std_f1 = np.std(f1_scores)
std_roc_auc = np.std(roc_aucs)

# Plot ROC curve
plt.figure(figsize=(8, 6))
plt.plot(mean_fpr, mean_tpr, color='b', lw=2, label=f'Mean ROC AUC = {best_roc_auc:.2f}')

# Plot diagonal line (random classifier)
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
# Set labels and title
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
# Save plot to new directory

# Directory
directory = "roc_auc_plots"

# Create the directory
os.makedirs(directory, exist_ok=True)

plt.savefig(f'roc_auc_plots/roc_curve_model_{model_flag}_T1_sequence.png')

# Show plot
plt.close()
#writing output metrics in output file
with open(output_txt_path, "a") as file:
    file.write(f"Best number of features T1 sequence- Model ({model_flag}): {best_k}\n")
    file.write(f"Best average accuracy T1 sequence- Model ({model_flag}): {best_accuracy:.2f} ± {std_accuracy:.2f}\n")
    file.write(f"Best average sensitivity T1 sequence- Model ({model_flag}): {best_sensitivity:.2f} ± {std_sensitivity:.2f}\n")
    file.write(f"Best average specificity T1 sequence- Model ({model_flag}): {best_specificity:.2f} ± {std_specificity:.2f}\n")
    file.write(f"Best average precision T1 sequence- Model ({model_flag}): {best_precision:.2f} ± {std_precision:.2f}\n")
    file.write(f"Best average F1-score T1 sequence- Model ({model_flag}): {best_f1:.2f} ± {std_f1:.2f}\n")
    file.write(f"Best average ROC AUC T1 sequence - Model ({model_flag}): {best_roc_auc:.2f} ± {std_roc_auc:.2f}\n")
    file.write(f"Best hyperparameters of the best roc_auc T1 sequence- Model ({model_flag}): {best_hyperparameters[best_k]}\n")

with open(output_txt_path, "a") as file:
    file.write(f"ROC_AUC plots T1 sequence - Model ({model_flag}) are saved in roc_auc_plots folder\n")
